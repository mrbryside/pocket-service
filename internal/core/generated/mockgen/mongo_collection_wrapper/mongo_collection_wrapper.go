// Code generated by MockGen. DO NOT EDIT.
// Source: ./collection_wrapper.go

// Package mockMongoCollectionWrapper is a generated GoMock package.
package mockMongoCollectionWrapper

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockCollectionWrapper is a mock of CollectionWrapper interface.
type MockCollectionWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionWrapperMockRecorder
}

// MockCollectionWrapperMockRecorder is the mock recorder for MockCollectionWrapper.
type MockCollectionWrapperMockRecorder struct {
	mock *MockCollectionWrapper
}

// NewMockCollectionWrapper creates a new mock instance.
func NewMockCollectionWrapper(ctrl *gomock.Controller) *MockCollectionWrapper {
	mock := &MockCollectionWrapper{ctrl: ctrl}
	mock.recorder = &MockCollectionWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionWrapper) EXPECT() *MockCollectionWrapperMockRecorder {
	return m.recorder
}

// InsertMany mocks base method.
func (m *MockCollectionWrapper) InsertMany(ctx context.Context, documents []interface{}, opts ...*options.InsertManyOptions) (*mongo.InsertManyResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, documents}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMany", varargs...)
	ret0, _ := ret[0].(*mongo.InsertManyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockCollectionWrapperMockRecorder) InsertMany(ctx, documents interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, documents}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockCollectionWrapper)(nil).InsertMany), varargs...)
}

// UpdateOne mocks base method.
func (m *MockCollectionWrapper) UpdateOne(ctx context.Context, filter, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockCollectionWrapperMockRecorder) UpdateOne(ctx, filter, update interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCollectionWrapper)(nil).UpdateOne), varargs...)
}
